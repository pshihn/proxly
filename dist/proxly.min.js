var proxly=function(){'use strict';function a(a,c){return new b(a,c).proxy}class b{constructor(a,b){this.$=a,this._path=b||[],this._proxy=new Proxy(function(){},this)}get proxy(){return this._proxy}get(b,c,d){if('then'===c){if(!this._path.length)return{then:()=>d};let a=new Promise(async(a,b)=>{let c=[];for(const d of this.$)try{c.push((await Reflect.get(d,this._path[this._path.length-1])))}catch(a){b(a)}a(c.length?1===c.length?c[0]:c:void 0)});return a.then.bind(a)}return a(this.$,this._path.concat(c))}set(a,b,c){return new Promise(async(a,d)=>{for(const e of this.$)try{Reflect.set(e,b,c)}catch(a){d(a)}})}apply(a,b,c){return new Promise(async(a,b)=>{const d=[],e=(a,b)=>b.reduce((a,b)=>a?a[b]:a,a);for(const f of this.$){let a=e(f,this._path),g=e(f,this._path.slice(0,-1));try{d.push((await Reflect.apply(a,g,c||[])))}catch(a){b(a)}}a(d.length?1===d.length?d[0]:d:void 0)})}}return function(){return a([...arguments])}}();